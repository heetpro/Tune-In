# Spotilove Frontend Socket.IO Implementation Guide

This guide provides all the necessary TypeScript interfaces and instructions for connecting your frontend to the Spotilove Socket.IO backend.

## 1. TypeScript Interfaces for Frontend

First, create these TypeScript interfaces to match the server schemas:

```typescript
// src/types/socket.ts

// Message related interfaces
export interface Message {
  id?: string;            // Optional for new messages, required when received from server
  senderId: string;       // User ID of sender
  receiverId: string;     // User ID of recipient
  text: string;           // Message content
  isRead: boolean;        // Whether message has been read (REQUIRED)
  isDelivered: boolean;   // Whether message has been delivered (REQUIRED)
  isDeleted: boolean;     // Soft delete flag (REQUIRED)
  createdAt?: Date;       // Creation timestamp
  readAt?: Date;          // When the message was read
  image?: string;         // Optional image URL
}

// For sending new messages (matches what server expects)
export interface SendMessagePayload {
  receiverId: string;
  text: string;
}

// Server response format
export interface MessageResponse {
  status: 'ok' | 'error';
  message: Message | string;
}

// User related interfaces
export interface User {
  _id: string;
  username: string;
  displayName: string;
  profilePicture?: string;
  status?: 'online' | 'offline' | 'away';
}

// For profile information in chats
export interface ChatUser {
  id: string;
  name: string;
  avatar: string;
  isOnline?: boolean;
}

// Conversation schema
export interface Conversation {
  id: string;
  participants: string[]; // User IDs
  lastActivity: Date;
  unreadCount?: number;   // Calculated on frontend
  participantInfo?: {     // Populated on frontend
    id: string;
    name: string;
    avatar: string;
    isOnline: boolean;
  };
}

// Socket event interfaces
export interface UserStatusEvent {
  userId: string;
  status: 'online' | 'offline';
}

export interface TypingEvent {
  userId: string;
  conversationId: string;
  timestamp: number;
}

export interface ReadReceiptEvent {
  messageId: string;
}

// Payload types for socket events
export interface ReadMessageEvent {
  messageId: string;
  senderId: string;
}

export interface TypingIndicatorEvent {
  conversationId: string;
  receiverId: string;
}
```

## 2. Socket Connection Setup

Create a socket service to manage connections:

```typescript
// src/services/socketService.ts
import { io, Socket } from 'socket.io-client';
import { getAuthToken } from './authService'; // Your function to get auth token

let socket: Socket | null = null;

export const initializeSocket = (): Socket => {
  if (socket) {
    return socket;
  }

  const token = getAuthToken();
  const userId = getUserId(); // Your function to get current user ID

  if (!token || !userId) {
    throw new Error('Authentication required to connect to chat');
  }

  // Connect to the socket server with auth
  socket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:3001', {
    query: { userId },
    auth: { token },
    withCredentials: true,
    reconnection: true,
    reconnectionAttempts: 10,
    reconnectionDelay: 1000,
    timeout: 20000,
    transports: ['websocket'], // Must match backend setting
  });

  // Set up event listeners for connection status
  socket.on('connect', () => {
    console.log('Socket connected!');
  });

  socket.on('connect_error', (error) => {
    console.error('Socket connection error:', error);
  });

  socket.on('disconnect', (reason) => {
    console.log('Socket disconnected:', reason);
  });

  return socket;
};

export const getSocket = (): Socket => {
  if (!socket || !socket.connected) {
    return initializeSocket();
  }
  return socket;
};

export const disconnectSocket = (): void => {
  if (socket) {
    socket.disconnect();
    socket = null;
  }
};
```

## 3. Socket Authentication

Make sure your authentication is properly set up:

```typescript
// src/services/authService.ts
// Example implementation - adapt to your auth system

let authToken: string | null = null;
let currentUserId: string | null = null;

export const setAuth = (token: string, userId: string): void => {
  authToken = token;
  currentUserId = userId;
  localStorage.setItem('auth_token', token);
  localStorage.setItem('user_id', userId);
};

export const getAuthToken = (): string | null => {
  if (!authToken) {
    authToken = localStorage.getItem('auth_token');
  }
  return authToken;
};

export const getUserId = (): string | null => {
  if (!currentUserId) {
    currentUserId = localStorage.getItem('user_id');
  }
  return currentUserId;
};

export const clearAuth = (): void => {
  authToken = null;
  currentUserId = null;
  localStorage.removeItem('auth_token');
  localStorage.removeItem('user_id');
};
```

## 4. Chat Context Provider

Create a React context to manage chat state:

```typescript
// src/contexts/ChatContext.tsx
import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { initializeSocket, getSocket, disconnectSocket } from '../services/socketService';
import { Message, UserStatusEvent, TypingEvent, ReadReceiptEvent } from '../types/socket';
import { getUserId } from '../services/authService';

interface ChatContextType {
  messages: Record<string, Message[]>; // Organized by conversation
  sendMessage: (receiverId: string, text: string) => Promise<boolean>;
  markAsRead: (messageId: string, senderId: string) => void;
  sendTypingIndicator: (conversationId: string, receiverId: string) => void;
  onlineUsers: string[];
  typingUsers: Record<string, { userId: string; timestamp: number }>;
  isConnected: boolean;
  connectionError: string | null;
}

const ChatContext = createContext<ChatContextType | null>(null);

export const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [messages, setMessages] = useState<Record<string, Message[]>>({});
  const [onlineUsers, setOnlineUsers] = useState<string[]>([]);
  const [typingUsers, setTypingUsers] = useState<Record<string, { userId: string; timestamp: number }>>({});
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);

  // Initialize socket connection
  useEffect(() => {
    try {
      const socket = initializeSocket();
      
      socket.on('connect', () => {
        setIsConnected(true);
        setConnectionError(null);
      });

      socket.on('connect_error', (error) => {
        setIsConnected(false);
        setConnectionError(error.message);
      });

      socket.on('disconnect', () => {
        setIsConnected(false);
      });

      // Clean up on unmount
      return () => {
        disconnectSocket();
      };
    } catch (error: any) {
      setConnectionError(error.message);
    }
  }, []);

  // Set up message and event listeners
  useEffect(() => {
    if (!isConnected) return;

    const socket = getSocket();
    const userId = getUserId();
    
    // Handle incoming messages
    socket.on('new_message', (message: Message) => {
      setMessages((prev) => {
        // Create conversation ID (this can be more sophisticated if needed)
        const conversationId = userId === message.senderId 
          ? message.receiverId 
          : message.senderId;
        
        // Get existing messages for this conversation
        const conversationMessages = prev[conversationId] || [];
        
        // Avoid duplicate messages
        if (conversationMessages.some(msg => msg.id === message.id)) {
          return prev;
        }
        
        // Make sure message has all required fields
        const completeMessage: Message = {
          ...message,
          isRead: message.isRead ?? false,
          isDelivered: message.isDelivered ?? true,
          isDeleted: message.isDeleted ?? false,
          createdAt: message.createdAt ? new Date(message.createdAt) : new Date()
        };
        
        // Add new message and sort by time
        return {
          ...prev,
          [conversationId]: [
            ...conversationMessages,
            completeMessage
          ].sort((a, b) => {
            return new Date(a.createdAt as Date).getTime() - 
                   new Date(b.createdAt as Date).getTime();
          })
        };
      });
    });

    // Handle read receipts
    socket.on('message_read', ({ messageId }: ReadReceiptEvent) => {
      setMessages((prev) => {
        const updated = { ...prev };
        
        // Find the message and update its read status
        Object.keys(updated).forEach(conversationId => {
          updated[conversationId] = updated[conversationId].map(msg => 
            msg.id === messageId ? { ...msg, isRead: true } : msg
          );
        });
        
        return updated;
      });
    });

    // Handle online users
    socket.on('getOnlineUsers', (users: string[]) => {
      setOnlineUsers(users);
    });

    // Handle user status changes
    socket.on('user_status_changed', ({ userId, status }: UserStatusEvent) => {
      setOnlineUsers(prev => {
        if (status === 'online' && !prev.includes(userId)) {
          return [...prev, userId];
        } else if (status === 'offline') {
          return prev.filter(id => id !== userId);
        }
        return prev;
      });
    });

    // Handle typing indicators
    socket.on('user_typing', ({ userId, conversationId, timestamp }: TypingEvent) => {
      setTypingUsers(prev => ({
        ...prev,
        [conversationId]: { userId, timestamp }
      }));
      
      // Auto-clear typing indicator after 2 seconds
      setTimeout(() => {
        setTypingUsers(prev => {
          const current = prev[conversationId];
          if (current && current.timestamp === timestamp) {
            const updated = { ...prev };
            delete updated[conversationId];
            return updated;
          }
          return prev;
        });
      }, 2000);
    });

    return () => {
      socket.off('new_message');
      socket.off('message_read');
      socket.off('getOnlineUsers');
      socket.off('user_status_changed');
      socket.off('user_typing');
    };
  }, [isConnected]);

  // Send a message
  const sendMessage = useCallback(async (receiverId: string, text: string): Promise<boolean> => {
    if (!isConnected) return false;
    
    try {
      const socket = getSocket();
      
      return new Promise((resolve) => {
        socket.emit(
          'send_message',
          { receiverId, text },
          (response: { status: string; message: any }) => {
            if (response.status === 'ok') {
              resolve(true);
            } else {
              console.error('Failed to send message:', response.message);
              resolve(false);
            }
          }
        );
      });
    } catch (error) {
      console.error('Error sending message:', error);
      return false;
    }
  }, [isConnected]);

  // Mark a message as read
  const markAsRead = useCallback((messageId: string, senderId: string) => {
    if (!isConnected) return;
    
    try {
      const socket = getSocket();
      socket.emit('read_message', { messageId, senderId });
    } catch (error) {
      console.error('Error marking message as read:', error);
    }
  }, [isConnected]);

  // Send typing indicator
  const sendTypingIndicator = useCallback((conversationId: string, receiverId: string) => {
    if (!isConnected) return;
    
    try {
      const socket = getSocket();
      socket.emit('typing', { conversationId, receiverId });
    } catch (error) {
      console.error('Error sending typing indicator:', error);
    }
  }, [isConnected]);

  return (
    <ChatContext.Provider
      value={{
        messages,
        sendMessage,
        markAsRead,
        sendTypingIndicator,
        onlineUsers,
        typingUsers,
        isConnected,
        connectionError,
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = () => {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};
```

## 5. Using the Chat Context in Components

Example of using the chat context in components:

```typescript
// src/components/ChatConversation.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useChat } from '../contexts/ChatContext';
import { getUserId } from '../services/authService';

interface ChatConversationProps {
  conversationId: string;
  recipientId: string;
  recipientName: string;
}

const ChatConversation: React.FC<ChatConversationProps> = ({
  conversationId,
  recipientId,
  recipientName,
}) => {
  const [messageText, setMessageText] = useState('');
  const [sending, setSending] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const {
    messages,
    sendMessage,
    markAsRead,
    sendTypingIndicator,
    onlineUsers,
    typingUsers,
    isConnected
  } = useChat();
  
  const conversationMessages = messages[recipientId] || [];
  const isOnline = onlineUsers.includes(recipientId);
  const isTyping = typingUsers[conversationId]?.userId === recipientId;
  const currentUserId = getUserId();
  
  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [conversationMessages]);
  
  // Mark messages as read
  useEffect(() => {
    conversationMessages.forEach(message => {
      if (message.senderId !== currentUserId && !message.isRead) {
        markAsRead(message.id as string, message.senderId);
      }
    });
  }, [conversationMessages, markAsRead, currentUserId]);
  
  // Handle message input and typing indicator
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setMessageText(e.target.value);
    sendTypingIndicator(conversationId, recipientId);
  };
  
  // Send message
  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!messageText.trim() || sending) return;
    
    setSending(true);
    const success = await sendMessage(recipientId, messageText);
    setSending(false);
    
    if (success) {
      setMessageText('');
    }
  };
  
  return (
    <div className="chat-conversation">
      <div className="chat-header">
        <h3>{recipientName}</h3>
        <span className={`status ${isOnline ? 'online' : 'offline'}`}>
          {isOnline ? 'Online' : 'Offline'}
        </span>
      </div>
      
      <div className="messages-container">
        {conversationMessages.map(message => (
          <div 
            key={message.id}
            className={`message ${message.senderId === currentUserId ? 'outgoing' : 'incoming'}`}
          >
            <div className="message-content">
              <p>{message.text}</p>
              <span className="timestamp">
                {new Date(message.createdAt as Date).toLocaleTimeString()}
              </span>
              
              {message.senderId === currentUserId && (
                <span className="status">
                  {message.isRead ? '✓✓' : message.isDelivered ? '✓' : ''}
                </span>
              )}
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="typing-indicator">
            {recipientName} is typing...
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
      
      <form onSubmit={handleSendMessage} className="message-form">
        <input 
          type="text"
          value={messageText}
          onChange={handleInputChange}
          placeholder="Type a message..."
          disabled={!isConnected || sending}
        />
        <button 
          type="submit" 
          disabled={!isConnected || !messageText.trim() || sending}
        >
          {sending ? 'Sending...' : 'Send'}
        </button>
      </form>
    </div>
  );
};
```

## 6. Integration in App Root

Make sure to wrap your application with the ChatProvider:

```typescript
// src/App.tsx
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { ChatProvider } from './contexts/ChatContext';
import AppRoutes from './AppRoutes';

const App: React.FC = () => {
  return (
    <BrowserRouter>
      <AuthProvider>
        <ChatProvider>
          <AppRoutes />
        </ChatProvider>
      </AuthProvider>
    </BrowserRouter>
  );
};

export default App;
```

## 7. Connection Troubleshooting

If you're having trouble with socket connections:

1. **Check Authentication**: 
   - Ensure your token and userId are correctly set
   - Validate that the token format matches what the server expects
   - Check server logs for authentication errors

2. **Network Issues**:
   - Verify CORS settings on both server and client
   - Check for firewall blocks on WebSocket connections
   - Test with simple ping/pong events to verify connectivity

3. **Schema Validation**:
   - Make sure all required fields are included when sending messages:
     - `isRead`
     - `isDelivered`
     - `isDeleted`
   - Check for proper types and formats

4. **Console Debugging**:
   Add these debug logs to your socket service:

```typescript
export const initializeSocket = (): Socket => {
  console.log('Initializing socket connection...');
  console.log('User ID:', getUserId());
  console.log('Auth token exists:', !!getAuthToken());
  
  // Existing code...
  
  socket.on('connect', () => {
    console.log('Socket connected successfully with ID:', socket.id);
  });

  socket.on('connect_error', (error) => {
    console.error('Socket connection error details:', error);
  });
  
  return socket;
};
```

## 8. Common Pitfalls to Avoid

1. **Missing Required Fields**: Always include all required fields in your message objects:
   ```typescript
   const messageData = {
     senderId: currentUserId,
     receiverId: recipientId,
     text: messageText,
     isRead: false,         // Required
     isDelivered: false,    // Required
     isDeleted: false       // Required
   };
   ```

2. **Not Handling Reconnections**: Socket.IO reconnects automatically, but you should handle state resyncing:
   ```typescript
   socket.on('reconnect', () => {
     console.log('Reconnected to server, fetching latest messages...');
     // Fetch latest messages or state
   });
   ```

3. **Missing Error Handling**: Always handle socket errors:
   ```typescript
   socket.on('error', (error) => {
     console.error('Socket error:', error);
     // Show user-friendly error message
   });
   ```

4. **Not Checking Permissions**: Make sure users can only chat with friends or matches:
   ```typescript
   // Check if users are friends before opening chat
   const canChatWith = (userId: string): boolean => {
     return friendsList.includes(userId) || matchesList.includes(userId);
   };
   ```

By following this guide, you should have a robust Socket.IO chat implementation that connects properly to your backend and handles all the required schemas and events. 