# SpotiLove Authentication System Documentation

## Authentication Flow Overview

The application uses Spotify OAuth for authentication. Here's the complete flow:

1. **Initial Login Request**
   - User clicks "Login with Spotify" button
   - Frontend redirects to: `http://localhost:3001/api/auth/spotify/login` (backend)

2. **Backend Redirects to Spotify**
   - Backend generates Spotify authorization URL with required parameters
   - User is redirected to Spotify's authorization page
   - Path: `/api/auth/spotify/login`
   - Implementation: `router.get('/spotify/login', (req, res) => { ... })`

3. **Spotify Authorization**
   - User authorizes the application on Spotify
   - Spotify redirects back to the configured callback URL with authorization code

4. **Callback Processing**
   - Backend receives callback at: `/api/auth/spotify/callback`
   - Path: `/api/auth/spotify/callback`
   - Implementation: `router.get('/spotify/callback', asyncHandler(getCallback))`

5. **Token Generation**
   - Backend exchanges authorization code for Spotify access token
   - Backend retrieves user profile from Spotify
   - Backend creates or updates user in database
   - Backend generates JWT token and refresh token
   - Tokens payload includes: `{ id: user._id, spotifyId: user.spotifyId }`

6. **Redirection to Frontend**
   - Backend redirects to frontend with tokens as URL parameters
   - Redirect URL: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/auth/success?token=${token}&refresh=${refreshToken}`

7. **Frontend Token Management**
   - Frontend extracts tokens from URL parameters
   - Frontend stores tokens (usually in local storage or memory)
   - Frontend uses tokens for authenticated requests

## API Authentication

For authenticated endpoints:

1. Include JWT token in Authorization header: `Authorization: Bearer YOUR_TOKEN`
2. Example for profile endpoint: `/api/auth/profile/me`
3. This endpoint requires authentication middleware: `router.get('/profile/me', authenticate, asyncHandler(getProfile))`

## User Schema

Here's the complete User schema as implemented in the backend:

```javascript
const UserSchema = new Schema<IUser>({
    // Required Spotify Auth Fields
    spotifyId: {
        type: String,
        required: true,
        unique: true,
    },
    username: {
        type: String,
        unique: true,
        sparse: true, // Allows multiple null values
        trim: true,
        lowercase: true,
        minlength: 3,
        maxlength: 30,
        match: [/^[a-z0-9._]+$/, 'Username can only contain letters, numbers, dots, and underscores'],
    },
    displayName: {
        type: String,
        required: true,
    },
    firstName: {
        type: String,
        required: true,
    },
    lastName: {
        type: String,
        required: false,
    },
    profilePicture: {
        type: String,
    },
    
    // Profile Fields
    bio: {
        type: String,
    },
    age: {
        type: Number,
    },
    gender: {
        type: String,
        enum: ['male', 'female', 'non-binary', 'other'],
    },
    intrestedIn: {
        type: [String],
    },
    location: {
        city: {
            type: String,
        },
        country: {
            type: String,
        },
    },
    
    // Status Fields
    isActive: {
        type: Boolean,
        default: false,
    },
    isOnline: {
        type: Boolean,
        default: false,
    },
    lastSeen: {
        type: Date,
    },
    
    // App-specific Fields
    dailyRolls: {
        date: {
            type: Date,
            default: Date.now,
        },
        count: {
            type: Number,
        },
    },
    musicProfile: {
        type: Schema.Types.ObjectId,
        ref: "MusicProfile",
    },
    
    // Friend system fields
    friends: {
        type: [String],
        default: [],
    },
    friendRequests: {
        incoming: {
            type: [String],
            default: [],
        },
        outgoing: {
            type: [String],
            default: [],
        },
    },
    
    // Settings
    privacySettings: {
        type: Object,
        default: {
            showAge: true,
            showLocation: true,
            showLastSeen: true,
        },
    },
    notifications: {
        type: Object,
        default: {
            newMessages: true,
            newLikes: true,
            newMatches: true,
            newFriendRequests: true,
        },
    },
    
    // Account Status
    isPremium: {
        type: Boolean,
        default: false,
    },
    isVerified: {
        type: Boolean,
        default: false,
    },
    isBanned: {
        type: Boolean,
        default: false,
    },
    banReason: {
        type: String,
    },
    banExpiresAt: {
        type: Date,
    },
    isAdmin: {
        type: Boolean,
        default: false,
    },
    hasCompletedOnboarding: {
        type: Boolean,
        default: false,
    }
});

// IUser TypeScript Interface
interface IUser extends Document {
    _id: string;
    spotifyId: string;
    username?: string;
    displayName: string;
    firstName: string;
    lastName?: string;
    profilePicture: string;
    bio: string;
    age: number;
    gender: 'male' | 'female' | 'non-binary' | 'other';
    intrestedIn: ('male' | 'female' | 'non-binary' | 'other')[];
    location: {
        city: string;
        country: string;
    };
    isActive: boolean;
    isOnline: boolean;
    lastSeen: Date;
    createdAt: Date;
    updatedAt: Date;
    dailyRolls: {
        date: Date;
        count: number;
    };
    musicProfile: IMusicProfile;
    friends: string[];
    friendRequests: {
        incoming: string[];
        outgoing: string[];
    };
    privacySettings: {
        showAge: boolean;
        showLocation: boolean;
        showLastSeen: boolean;
    };
    notifications: {
        newMessages: boolean;
        newLikes: boolean;
        newMatches: boolean;
        newFriendRequests: boolean;
    };
    isPremium: boolean;
    isVerified: boolean;
    isBanned: boolean;
    banReason?: string;
    banExpiresAt?: Date;
    isAdmin?: boolean;
    hasCompletedOnboarding: boolean;
}
```

## Music Profile Schema

```javascript
interface IMusicProfile {
    spotifyConnected: boolean;
    spotifyAccessToken?: string;
    spotifyRefreshToken?: string;
    spotifyTokenExpiresAt?: Date;
    currentlyPlaying?: ICurrentTrack;
    recentTracks: ITrack[];
    topArtists: {
        short_term: IArtist[];
        medium_term: IArtist[];
        long_term: IArtist[];
    }
    topTracks: {
        short_term: ITrack[];
        medium_term: ITrack[];
        long_term: ITrack[];
    };
    topGenres: IGenre[];
    audioFeatures: IAudioFeatures;
    playlists: IPlaylist[];
    compatibilityScore: Map<string, number>;
    lastSyncAt: Date;
}
```

## Testing Authentication

To test the authentication flow:

1. Make sure your Spotify Developer app has the correct callback URL:
   - For backend-only: `http://localhost:3001/api/auth/spotify/callback`
   - For frontend proxy: `http://localhost:3000/api/auth/spotify/callback`

2. To test protected endpoints (like `/api/auth/profile/me`):
   - Get a valid token by going through the login flow
   - Make API requests with the Authorization header: `Authorization: Bearer YOUR_TOKEN`
   - Example curl request:
   ```
   curl -H "Authorization: Bearer YOUR_TOKEN" http://localhost:3001/api/auth/profile/me
   ```

## Front-end Implementation Requirements

When implementing the frontend:

1. Create a "Login with Spotify" button that redirects to: `http://localhost:3001/api/auth/spotify/login`
2. Create a success page at `/auth/success` that:
   - Extracts token and refresh token from URL query parameters
   - Stores tokens securely (localStorage, cookies, or memory)
   - Redirects user to main app
3. Set up API calls with Authorization header
4. Implement token refresh logic when original token expires 

## Friend System

The application includes a friend system with the following functionality:

### Friend Request Schema

```javascript
const FriendRequestSchema = new Schema<IFriendRequest>({
    senderId: {
        type: String,
        required: true,
    },
    receiverId: {
        type: String,
        required: true,
    },
    status: {
        type: String,
        enum: ['pending', 'accepted', 'rejected'],
        default: 'pending',
        required: true,
    },
    createdAt: {
        type: Date,
        default: Date.now,
        required: true,
    },
    updatedAt: {
        type: Date,
        default: Date.now,
        required: true,
    },
    respondedAt: {
        type: Date,
        required: false,
    },
});
```

### Friend Endpoints

1. **Get all friends**
   - `GET /api/friends`
   - Returns a list of all friends for the authenticated user

2. **Get all friend requests**
   - `GET /api/friends/requests`
   - Returns all incoming and outgoing friend requests for the authenticated user

3. **Send a friend request**
   - `POST /api/friends/request`
   - Body: `{ "receiverId": "user-id-here" }`
   - Sends a friend request to the specified user

4. **Accept a friend request**
   - `PUT /api/friends/request/:requestId/accept`
   - Accepts a pending friend request

5. **Reject a friend request**
   - `PUT /api/friends/request/:requestId/reject`
   - Rejects a pending friend request

6. **Remove a friend**
   - `DELETE /api/friends/:friendId`
   - Removes a user from the friends list

## Chat System

The application includes a real-time chat system using Socket.io with the following rules:

1. Users can only chat with:
   - Users they have matched with (mutual match status = "accepted")
   - Users they are friends with

### Chat Endpoints

1. **Get all conversations**
   - `GET /api/chat`
   - Returns all active conversations for the authenticated user

2. **Create/Get a conversation**
   - `POST /api/chat/chat`
   - Body: `{ "participantId": "user-id-here" }`
   - Creates a new conversation or returns an existing one with the specified user
   - Requires users to be friends or have a match

3. **Get conversation messages**
   - `GET /api/chat/chat/:conversationId/messages`
   - Returns paginated messages for the specified conversation

4. **Mark messages as read**
   - `PATCH /api/chat/chat/:conversationId/read`
   - Marks all messages in a conversation as read

### Socket.io Events

1. **Connection Authentication**
   - Clients must provide a valid JWT token in the connection handshake

2. **Events Client can Emit**
   - `send_message`: Send a new message in a conversation
   - `mark_read`: Mark a message as read
   - `typing_start`: Indicate user has started typing
   - `typing_stop`: Indicate user has stopped typing

3. **Events Client will Receive**
   - `new_message`: When a new message is received
   - `message_delivered`: When a message is delivered
   - `message_read`: When a message is read
   - `user_typing`: When another user starts typing
   - `user_stopped_typing`: When another user stops typing
   - `user_offline`: When another user goes offline
   - `error`: When an error occurs 

## Username System

The application includes a username system to make it easier for users to find and connect with each other.

### Onboarding Process

1. **Initial Login**
   - When a user logs in for the first time, they don't have a username
   - The callback response includes a `needsUsername` parameter
   - The frontend should redirect to an onboarding page if `needsUsername` is true

2. **Setting Username**
   - `POST /api/auth/username`
   - Body: `{ "username": "desired_username" }`
   - Usernames must:
     - Be 3-30 characters long
     - Contain only letters, numbers, dots, and underscores
     - Be unique across all users
     - Be lowercase (automatically converted)

3. **Checking Onboarding Status**
   - `GET /api/auth/onboarding`
   - Returns: 
     ```json
     {
       "hasCompletedOnboarding": true/false,
       "hasUsername": true/false,
       "username": "user_username"
     }
     ```

### Friend System with Username

The friend system has been updated to work with usernames:

1. **Searching Users**
   - `GET /api/friends/search?query=username`
   - Search by username or display name
   - Returns users with their friendship status relative to the current user:
     - "friends": Already friends
     - "request-sent": Current user has sent a request
     - "request-received": Current user has received a request
     - "none": No relationship

2. **Sending Friend Requests**
   - `POST /api/friends/request`
   - Body with ID: `{ "receiverId": "user_id" }`
   - Body with username: `{ "username": "target_username" }`
   - Allows finding users by username instead of requiring their ID 