# Spotilove Backend Technical Documentation

## Overview
Spotilove is a music-based dating/social networking application that leverages Spotify's API to match users based on their music preferences and listening habits. The backend is built with Node.js, Express, TypeScript, MongoDB, Redis, and Socket.IO to provide a robust, real-time experience.

## Core Architecture

### Server Setup
- The application uses Express.js as the web framework
- HTTP server is created using Node.js 'http' module
- Socket.IO is integrated for real-time communication
- Redis is used for Socket.IO adapter to enable horizontal scaling
- MongoDB is used as the primary database

### Authentication Flow

1. **Spotify OAuth 2.0 Flow**:
   - Users are redirected to `/spotify/login` endpoint
   - Backend generates an authorization URL with required scopes
   - After user approves, Spotify redirects to `/spotify/callback`
   - Backend exchanges authorization code for access token
   - User profile is fetched from Spotify and stored/updated in database
   - User's Spotify music data (top tracks, artists, genres, etc.) is automatically synced during authentication
   - JWT tokens (access + refresh) are generated and sent to frontend

2. **Authentication Middleware**:
   - Most API routes are protected by `authenticate` middleware
   - JWT token is verified from Authorization header
   - User is loaded from database and attached to request object
   - Banned users are blocked from accessing the API

3. **Socket Authentication**:
   - Similar JWT verification for WebSocket connections
   - User info is attached to socket connection

### Data Models

#### User Model
- Core user information (spotifyId, username, displayName, etc.)
- Friend management (friends, friendRequests)
- Music profile reference (now properly handled as a reference to MusicProfile model)
- Account status (isPremium, isVerified, isBanned)
- Privacy and notification settings
- Onboarding status

#### Music Profile
- Top artists, tracks, and genres
- Recent listening history
- Audio feature preferences (danceability, energy, etc.)
- Playlists
- Currently playing track
- Last synchronization timestamp

### API Endpoints

#### Authentication
- `GET /spotify/login` - Redirects to Spotify OAuth flow
- `GET /spotify/callback` - Processes OAuth callback from Spotify
- `POST /logout` - Logs out user by invalidating tokens
- `GET /auth/check` - Validates authentication token and checks if user exists

#### Profile Management
- `GET /profile/me` - Gets user's Spotify profile
- `POST /username` - Sets/updates username
- `GET /onboarding` - Checks user's onboarding status

#### Spotify Data
- `GET /spotify/sync` - Manually refreshes user's Spotify data (not needed on initial login, happens automatically)
- `GET /spotify/profile` - Gets user's music profile
- `GET /spotify/top-artists` - Gets user's top artists
- `GET /spotify/top-tracks` - Gets user's top tracks
- `GET /spotify/recent-tracks` - Gets user's recently played tracks
- `GET /spotify/playlists` - Gets user's playlists
- `GET /spotify/current-track` - Gets user's currently playing track
- `GET /spotify/top-genres` - Gets user's top genres
- `GET /spotify/audio-features` - Gets audio features for user's top tracks

## Spotify Integration Implementation Details

### 1. Automatic Data Synchronization During Authentication

The system now automatically synchronizes Spotify data during the authentication process, eliminating the need for separate API calls to fetch user music data. This is implemented in the `getCallback.ts` file:

```typescript
// src/functions/getCallback.ts
export const getCallback = async (req: Request, res: Response) => {
  try {
    const { code } = req.query;
    
    // Exchange code for access token
    const tokenData = await spotify.getAccessToken(code as string);
    
    // Fetch user profile
    const userProfile = await spotify.getUserProfile(tokenData.access_token);
    
    // Find or create user
    let user = await User.findOne({ spotifyId: userProfile.id });
    if (!user) {
      // Create new user...
    }
    
    // Automatically sync Spotify data during login
    syncUserSpotifyData(user._id.toString(), tokenData.access_token)
      .then(syncResults => {
        console.log('Initial data sync completed during login:', syncResults);
      })
      .catch(error => {
        console.error('Error during initial Spotify data sync:', error);
      });
    
    // Generate tokens and redirect
    const token = generateToken({ id: user._id, spotifyId: user.spotifyId }, res);
    
    // Redirect to frontend with tokens
    return res.redirect(`${config.frontendUrl}/auth/callback?token=${token}&needsUsername=${!user.username}`);
  } catch (error) {
    console.error('Error in Spotify callback:', error);
    return res.redirect(`${config.frontendUrl}/auth/error`);
  }
};
```

### 2. Reusable Spotify Data Synchronization Function

The core functionality for syncing Spotify data is now extracted into a reusable function that can be called both during authentication and manually through the API:

```typescript
// src/functions/spotify/syncSpotifyData.ts
export const syncUserSpotifyData = async (
    userId: string,
    accessToken: string
): Promise<any> => {
    try {
        console.log('Starting Spotify data sync for user:', userId);

        const user = await User.findById(userId);
        if (!user) {
            throw new Error('User not found');
        }

        // Find existing music profile or create a new one
        let musicProfile;
        if (user.musicProfile) {
            // Try to find existing profile
            musicProfile = await MusicProfile.findById(user.musicProfile);
        }

        if (!musicProfile) {
            // Create new music profile if none exists
            musicProfile = new MusicProfile({
                spotifyConnected: true,
                spotifyAccessToken: accessToken,
                spotifyTokenExpiresAt: new Date(Date.now() + 3600 * 1000), // Default 1 hour
                topArtists: {
                    short_term: [],
                    medium_term: [],
                    long_term: []
                },
                topTracks: {
                    short_term: [],
                    medium_term: [],
                    long_term: []
                },
                recentTracks: [],
                playlists: [],
                topGenres: [],
                audioFeatures: {
                    danceability: 0,
                    energy: 0,
                    key: 0,
                    mode: 0,
                    speechiness: 0,
                    acousticness: 0,
                    instrumentalness: 0,
                    liveness: 0,
                    valence: 0,
                    tempo: 0,
                    duration: 0,
                    timeSignature: 0,
                    loudness: 0
                },
                lastSyncAt: new Date(),
                compatibilityScore: new Map<string, number>(),
                recentlyPlayed: []
            });

            // Save the new profile
            await musicProfile.save();
            
            // Link it to the user
            user.musicProfile = musicProfile._id;
            await user.save();
        } else {
            // Update existing profile
            musicProfile.spotifyConnected = true;
            musicProfile.spotifyAccessToken = accessToken;
            await musicProfile.save();
        }

        // Fetch all Spotify data in parallel using Promise.allSettled
        const [
            topArtistsShort,
            topArtistsMedium,
            topArtistsLong,
            topTracksShort,
            topTracksMedium,
            topTracksLong,
            recentTracks,
            likedTracks,
            playlists,
            currentTrack,
            topGenres
        ] = await Promise.allSettled([
            spotify.getTopArtists(accessToken, 'short_term', 50),
            spotify.getTopArtists(accessToken, 'medium_term', 50),
            spotify.getTopArtists(accessToken, 'long_term', 50),
            spotify.getTopTracks(accessToken, 'short_term', 50),
            spotify.getTopTracks(accessToken, 'medium_term', 50),
            spotify.getTopTracks(accessToken, 'long_term', 50),
            spotify.getRecentlyPlayed(accessToken, 50),
            spotify.getLikedTracks(accessToken, 50),
            spotify.getUserPlaylists(accessToken, 50),
            spotify.getCurrentTrack(accessToken),
            spotify.getTopGenres(accessToken)
        ]);

        // Update music profile with fetched data
        if (topArtistsShort.status === 'fulfilled') {
            musicProfile.topArtists.short_term = topArtistsShort.value;
        }
        if (topArtistsMedium.status === 'fulfilled') {
            musicProfile.topArtists.medium_term = topArtistsMedium.value;
        }
        if (topArtistsLong.status === 'fulfilled') {
            musicProfile.topArtists.long_term = topArtistsLong.value;
        }

        if (topTracksShort.status === 'fulfilled') {
            musicProfile.topTracks.short_term = topTracksShort.value;
        }
        if (topTracksMedium.status === 'fulfilled') {
            musicProfile.topTracks.medium_term = topTracksMedium.value;
        }
        if (topTracksLong.status === 'fulfilled') {
            musicProfile.topTracks.long_term = topTracksLong.value;
        }

        if (recentTracks.status === 'fulfilled') {
            musicProfile.recentTracks = recentTracks.value.map(rt => rt.track).slice(0, 50);
        }

        if (playlists.status === 'fulfilled') {
            musicProfile.playlists = playlists.value;
        }

        if (currentTrack.status === 'fulfilled' && currentTrack.value) {
            musicProfile.currentlyPlaying = currentTrack.value;
        }

        if (topGenres.status === 'fulfilled') {
            musicProfile.topGenres = topGenres.value;
        }

        // Calculate audio features from top tracks
        try {
            const allTopTracks = [
                ...(topTracksShort.status === 'fulfilled' ? topTracksShort.value : []),
                ...(topTracksMedium.status === 'fulfilled' ? topTracksMedium.value : []),
                ...(topTracksLong.status === 'fulfilled' ? topTracksLong.value : [])
            ];

            if (allTopTracks.length > 0) {
                const uniqueTrackIds = [...new Set(allTopTracks.map(track => track.spotifyId))];
                const audioFeatures = await spotify.getAudioFeatures(accessToken, uniqueTrackIds.slice(0, 100));

                if (audioFeatures.length > 0) {
                    const avgFeatures = audioFeatures.reduce((acc, features) => {
                        Object.keys(features).forEach(key => {
                            if (typeof features[key as keyof typeof features] === 'number') {
                                acc[key as keyof typeof acc] = (acc[key as keyof typeof acc] || 0) + 
                                    (features[key as keyof typeof features] as number);
                            }
                        });
                        return acc;
                    }, {} as any);

                    Object.keys(avgFeatures).forEach(key => {
                        avgFeatures[key] = avgFeatures[key] / audioFeatures.length;
                    });

                    musicProfile.audioFeatures = avgFeatures;
                }
            }
        } catch (audioError) {
            console.error('Error fetching audio features:', audioError);
        }

        musicProfile.lastSyncAt = new Date();
        await musicProfile.save();

        return {
            topArtists: {
                short_term: topArtistsShort.status === 'fulfilled' ? topArtistsShort.value.length : 0,
                medium_term: topArtistsMedium.status === 'fulfilled' ? topArtistsMedium.value.length : 0,
                long_term: topArtistsLong.status === 'fulfilled' ? topArtistsLong.value.length : 0,
            },
            topTracks: {
                short_term: topTracksShort.status === 'fulfilled' ? topTracksShort.value.length : 0,
                medium_term: topTracksMedium.status === 'fulfilled' ? topTracksMedium.value.length : 0,
                long_term: topTracksLong.status === 'fulfilled' ? topTracksLong.value.length : 0,
            },
            recentTracks: recentTracks.status === 'fulfilled' ? recentTracks.value.length : 0,
            playlists: playlists.status === 'fulfilled' ? playlists.value.length : 0,
            topGenres: topGenres.status === 'fulfilled' ? topGenres.value.length : 0,
            currentTrack: currentTrack.status === 'fulfilled' && currentTrack.value ? true : false,
            lastSyncAt: musicProfile.lastSyncAt,
        };
    } catch (error: any) {
        console.error('Error in syncUserSpotifyData:', error);
        throw error;
    }
};
```

### 3. Improved Data Retrieval with Mongoose Population

The endpoints for retrieving Spotify data have been updated to properly handle the reference relationship between User and MusicProfile models:

```typescript
// src/functions/spotify/getTopArtists.ts
export const getTopArtists = async (req: AuthRequest, res: Response) => {
    try {
        const userId = req.user._id;
        const { timeRange = 'medium_term' } = req.query;

        // Populate the musicProfile reference
        const user = await User.findById(userId).populate('musicProfile');
        
        if (!user) {
            return res.status(404).json({ error: "User not found" });
        }

        // Check if musicProfile exists
        if (!user.musicProfile) {
            return res.status(404).json({ error: "Music profile not found" });
        }

        // Check if it's an ObjectId (not populated) or document
        const isMusicProfilePopulated = 
            user.musicProfile instanceof mongoose.Types.ObjectId === false &&
            typeof user.musicProfile !== 'string';
            
        if (!isMusicProfilePopulated) {
            return res.status(500).json({ error: "Failed to load music profile data" });
        }

        // Now we can safely cast it to IMusicProfile
        const musicProfile = user.musicProfile as IMusicProfile;

        // Now we can access the populated musicProfile
        const validTimeRanges = ['short_term', 'medium_term', 'long_term'];
        const range = validTimeRanges.includes(timeRange as string) ? timeRange as string : 'medium_term';

        // Handle case where topArtists might not exist or be properly initialized
        const artists = 
            musicProfile.topArtists && 
            musicProfile.topArtists[range as keyof typeof musicProfile.topArtists] ? 
            musicProfile.topArtists[range as keyof typeof musicProfile.topArtists] : [];

        return res.status(200).json({
            timeRange: range,
            artists,
            count: artists.length
        });

    } catch (error) {
        console.error('Error fetching top artists:', error);
        return res.status(500).json({ error: "Failed to fetch top artists" });
    }
};
```

Similar implementations are used for `getTopTracks.ts` and `getTopGenres.ts`.

### 4. Improved Type Handling for Mongoose References

The application now properly handles the relationship between User and MusicProfile models using Mongoose references and TypeScript interfaces:

```typescript
// src/types/index.ts (excerpt)
export interface IUser extends Document {
    // ...other properties
    
    // Updated to handle both full documents and references
    musicProfile: IMusicProfile | mongoose.Types.ObjectId | string;
    
    // ...other properties
}

export interface IMusicProfile {
    spotifyConnected: boolean;
    spotifyAccessToken?: string;
    spotifyRefreshToken?: string;
    spotifyTokenExpiresAt?: Date;

    currentlyPlaying?: ICurrentTrack;
    recentTracks: ITrack[];
    recentlyPlayed: IRecentlyPlayedTrack[];  

    topArtists: {
        short_term: IArtist[];
        medium_term: IArtist[];
        long_term: IArtist[];
    }

    topTracks: {
        short_term: ITrack[];
        medium_term: ITrack[];
        long_term: ITrack[];
    };

    topGenres: IGenre[];
    audioFeatures: IAudioFeatures;

    playlists: IPlaylist[];

    compatibilityScore: Map<string, number>;

    lastSyncAt: Date;
}
```

### 5. Manual Sync Endpoint Implementation

The manual sync endpoint is still available for cases where users want to refresh their Spotify data outside the authentication flow:

```typescript
// src/functions/spotify/syncSpotifyData.ts (API endpoint)
export const syncSpotifyData = async (req: AuthRequest, res: Response) => {
    try {
        const userId = req.user._id;

        const user = await User.findById(userId);

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Check if musicProfile exists and is connected
        const musicProfile = user.musicProfile ? await MusicProfile.findById(user.musicProfile) : null;

        if (!musicProfile?.spotifyConnected || !musicProfile?.spotifyAccessToken) {
            return res.status(400).json({ error: 'Spotify not connected' });
        }
        
        let accessToken = musicProfile.spotifyAccessToken;

        // Handle token refresh if expired
        if (musicProfile.spotifyTokenExpiresAt && musicProfile.spotifyTokenExpiresAt < new Date()) {
            if (!musicProfile.spotifyRefreshToken) {
                return res.status(401).json({ error: 'Spotify token expired and no refresh token available' });
            }

            const refreshedTokens = await spotify.refreshAccessToken(musicProfile.spotifyRefreshToken);
            accessToken = refreshedTokens.access_token;
            musicProfile.spotifyAccessToken = refreshedTokens.access_token;
            musicProfile.spotifyTokenExpiresAt = new Date(Date.now() + refreshedTokens.expires_in * 1000);

            if (refreshedTokens.refresh_token) {
                musicProfile.spotifyRefreshToken = refreshedTokens.refresh_token;
            }
            
            await musicProfile.save();
        }

        // Call the shared sync function
        const syncResults = await syncUserSpotifyData(userId, accessToken);

        return res.status(200).json({ 
            message: "Spotify data synced successfully",
            syncResults 
        });
    } catch (error: any) {
        console.error('Error syncing Spotify data:', error);
        
        if (error.message === 'SPOTIFY_TOKEN_EXPIRED') {
            return res.status(401).json({ error: 'Spotify token expired' });
        }
        
        return res.status(500).json({ error: "Failed to sync Spotify data" });
    }
};
```

## Key Improvements in Spotify Data Handling

### 1. Automatic Synchronization During Authentication
- Users' Spotify data is now automatically synchronized during the authentication process
- No need for separate API calls to fetch music data after login
- Improves user experience by having data ready immediately after login

### 2. Proper Mongoose Reference Handling
- User and MusicProfile models are now properly linked via Mongoose references
- Improved type safety with TypeScript interfaces that handle both document and reference types
- Proper population of referenced documents in API endpoints

### 3. Robust Error Handling
- All API endpoints include comprehensive error handling
- Proper type checking to prevent "undefined is not an object" errors
- Graceful handling of cases where music profile might not exist

### 4. Parallel Data Fetching
- Uses Promise.allSettled to fetch multiple data types in parallel
- Continues processing even if some API calls fail
- Provides detailed success/failure information for each data type

### 5. Token Refresh Mechanism
- Automatically refreshes expired Spotify tokens
- Stores new tokens in the database
- Handles cases where refresh token might not be available

### 6. Comprehensive Data Collection
- Fetches a wide range of Spotify data:
  - Top artists (short, medium, and long term)
  - Top tracks (short, medium, and long term)
  - Recent listening history
  - Playlists
  - Currently playing track
  - Audio features analysis
  - Genre preferences

### 7. Audio Feature Analysis
- Calculates average audio features from user's top tracks
- Creates a musical "fingerprint" for each user
- Used for compatibility matching with other users

## Database Schema Updates

### User Collection
```typescript
{
  _id: ObjectId,
  spotifyId: String,
  // ...other fields
  musicProfile: {
    type: ObjectId,
    ref: "MusicProfile"
  },
  // ...other fields
}
```

### Music Profile Collection
```typescript
{
  _id: ObjectId,
  spotifyConnected: Boolean,
  spotifyAccessToken: String,
  spotifyRefreshToken: String,
  spotifyTokenExpiresAt: Date,
  
  topArtists: {
    short_term: [ArtistSchema],
    medium_term: [ArtistSchema],
    long_term: [ArtistSchema]
  },
  
  topTracks: {
    short_term: [TrackSchema],
    medium_term: [TrackSchema],
    long_term: [TrackSchema]
  },
  
  topGenres: [GenreSchema],
  audioFeatures: AudioFeaturesSchema,
  recentTracks: [TrackSchema],
  recentlyPlayed: [RecentlyPlayedTrackSchema],
  playlists: [PlaylistSchema],
  currentlyPlaying: CurrentTrackSchema,
  
  compatibilityScore: Map,
  lastSyncAt: Date
}
```

## API Response Examples

### Get Top Artists
```json
{
  "timeRange": "medium_term",
  "artists": [
    {
      "spotifyId": "4tZwfgrHOc3mvqYlEYSvVi",
      "name": "Daft Punk",
      "genres": ["french house", "electro"],
      "popularity": 82,
      "images": [
        {
          "url": "https://i.scdn.co/image/ab6761610000e5eb9e3acf1eaf3b8846e836f441",
          "height": 640,
          "width": 640
        }
      ],
      "externalUrl": {
        "spotify": "https://open.spotify.com/artist/4tZwfgrHOc3mvqYlEYSvVi"
      }
    }
  ],
  "count": 1
}
```

### Get Top Tracks
```json
{
  "timeRange": "medium_term",
  "tracks": [
    {
      "spotifyId": "0DiWol3AO6WpXZgp0goxAV",
      "name": "Get Lucky",
      "artists": [
        {
          "spotifyId": "4tZwfgrHOc3mvqYlEYSvVi",
          "name": "Daft Punk"
        }
      ],
      "album": {
        "spotifyId": "2CJnMhwEEkS8R1ctgt5llf",
        "name": "Random Access Memories",
        "albumType": "album",
        "images": [
          {
            "url": "https://i.scdn.co/image/ab67616d0000b273b33d46dfa2635a47eebf63b2",
            "height": 640,
            "width": 640
          }
        ],
        "releaseDate": "2013-05-17T00:00:00.000Z"
      },
      "duration": 369626,
      "popularity": 84,
      "explicit": false,
      "href": "https://api.spotify.com/v1/tracks/0DiWol3AO6WpXZgp0goxAV",
      "externalUrl": {
        "spotify": "https://open.spotify.com/track/0DiWol3AO6WpXZgp0goxAV"
      }
    }
  ],
  "count": 1
}
```

### Get Top Genres
```json
{
  "genres": [
    {
      "name": "pop",
      "weight": 0.8
    },
    {
      "name": "rock",
      "weight": 0.5
    },
    {
      "name": "indie",
      "weight": 0.3
    }
  ],
  "count": 3
}
```

### Sync Spotify Data Response
```json
{
  "message": "Spotify data synced successfully",
  "syncResults": {
    "topArtists": {
      "short_term": 50,
      "medium_term": 50,
      "long_term": 50
    },
    "topTracks": {
      "short_term": 50,
      "medium_term": 50,
      "long_term": 50
    },
    "recentTracks": 50,
    "playlists": 20,
    "topGenres": 15,
    "currentTrack": true,
    "lastSyncAt": "2023-06-15T12:34:56.789Z"
  }
}
```

## Error Handling Examples

### Music Profile Not Found
```json
{
  "error": "Music profile not found"
}
```

### Token Expired
```json
{
  "error": "Spotify token expired"
}
```

### Failed to Load Music Profile
```json
{
  "error": "Failed to load music profile data"
}
```

## Future Improvements

1. **Caching Strategy**: Implement Redis caching for frequently accessed Spotify data to reduce API calls
2. **Background Job Processing**: Move data synchronization to background job queue for better scalability
3. **Incremental Updates**: Only fetch and update data that has changed since last sync
4. **Webhooks**: Implement Spotify webhooks for real-time updates when available
5. **Offline Mode**: Store essential data for offline access
6. **Rate Limiting**: Implement more sophisticated rate limiting to prevent Spotify API quota exhaustion
